[
  {
    "objectID": "exposition.html#introduction",
    "href": "exposition.html#introduction",
    "title": "deck.gl: A High Performance GPU-Powered Visualization Framework",
    "section": "Introduction",
    "text": "Introduction\ndeck.gl is a powerful and versatile GPU-based framework for creating stunning and interactive visual representations of large datasets. It is an open-source tool built on WebGL originally developed by Uber and now maintained under the OpenJS Foundation.\ndeck.gl is built to handle large datasets efficiently by leveraging GPU capabilites to render complex visualizations. A major appilcation of deck.gl is itâ€™s ability to efficiently visualize geo-spatial data (like maps and 3D scans). It is highly compatible with major basemap providers like Mapbox and Google Maps. It also provides interactive event-handling like picking, highlighting and filtering which allows users to interact with individual datapoints on the maps with ease."
  },
  {
    "objectID": "exposition.html#installation-and-setup",
    "href": "exposition.html#installation-and-setup",
    "title": "deck.gl: A High Performance GPU-Powered Visualization Framework",
    "section": "Installation and Setup",
    "text": "Installation and Setup\nTo install and run deck.gl on your system, you will need npm (Node.js package manager).\nInstructions to install npm on your system can be found here.\nTo install the deck.gl framework:\nnpm install deck.gl --save\nThis should install the deck.gl module which includes all the deck.gl features and their dependencies. More detailed instructions about installation can be found on the deck.gl website"
  },
  {
    "objectID": "exposition.html#key-features-and-explanation",
    "href": "exposition.html#key-features-and-explanation",
    "title": "deck.gl: A High Performance GPU-Powered Visualization Framework",
    "section": "Key Features and Explanation",
    "text": "Key Features and Explanation\n\n1. GPU Acceleration\nUnlike traditional data visualization libraries that rely heavily on CPU computation, deck.gl enables the rendering of massive datasets directly on the GPU.\n\n\n2. Layer-based Approach:\ndeck.gl visualizations use layers as building blocks. Layers accept data and map it to visual elements rendered on the GPU. Each layer represents a specific type of visualization, and these layers can then be combined together to form complex visuals.\nThe main types of layers are:\n\nCore Layers\nAggregation Layers\nGeo Layers\nMesh Layers\n\nFor an exhaustive list of layers, visit the deck.gl Layer Catalog\n\n\n3. Integration with Mapping Libraries:\ndeck.gl is highly compatible with mapping libraries like Mapbox, Google Maps, OpenStreetMap.\n\n\n4. Compatible With Multiple Data Formats:\ndeck.gl uses loaders.gl to read data and resources. loaders.gl supports various data formats such as CSV, GeoJSON, LAS, 3D Tiles (such as Point Clouds and Batch 3D models), Vector Tiles (such as Mapbox) and many more.\n\n\n5. Interactivity:\ndeck.gl has built-in support for zooming, panning, tooltips and hover events."
  },
  {
    "objectID": "exposition.html#code-examples",
    "href": "exposition.html#code-examples",
    "title": "deck.gl: A High Performance GPU-Powered Visualization Framework",
    "section": "Code Examples",
    "text": "Code Examples\nThe following code snippets shows how to display a simple map in deck.gl, centred on Vancouver, Canada, and use HexagonLayer to display the number of trees across the city in the form of hexagonal bars. The entire source code of the example can be accessed from here.\nThe code is written in Typescript and rendered using React. It uses the following imports\nimport React from 'react';\nimport {createRoot} from 'react-dom/client';\nimport {Map} from 'react-map-gl/maplibre';\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\nimport DeckGL from '@deck.gl/react';\nimport {CSVLoader} from '@loaders.gl/csv';\nimport {load} from '@loaders.gl/core';\nimport type {Color, PickingInfo, MapViewState} from '@deck.gl/core';\nFirst up, we render an empty map. For that, we get the map style from Carto. We define some constants corresponding to the source of our map, and the public trees dataset.\nconst MAP_STYLE = 'https://basemaps.cartocdn.com/gl/dark-matter-nolabels-gl-style/style.json';\nconst DATA_URL =\n  'https://raw.githubusercontent.com/Aayush75/ES114-Exposition-Article/refs/heads/main/final_data.csv'; \nThen, we use a Map component with the mapStyle property set to MAP_STYLE, inside a DeckGL component and then render it using the .render() method on our root HTML element.\nfunction App(/* args */) {\n    return (\n    &lt;DeckGL\n        // options\n    &gt;\n      &lt;Map reuseMaps mapStyle={MAP_STYLE} /&gt;\n    &lt;/DeckGL&gt;\n    );\n}\n\nasync function renderToDOM(container: HTMLDivElement) {\n    const root = createRoot(container);\n    root.render(&lt;App /&gt;);\n}\nNow, to add a HexagonLayer on the map, we create a layers array with a single HexagonLayer element. The HexagonLayer constructor takes an object with various properties that modify the characteristics and behaviour of the rendered layer. For convenience and reusability, we have defined a React component called App that does this.\nexport default function App({\n  data = null,\n  mapStyle = MAP_STYLE\n}: {\n  data?: DataPoint[] | null;\n  mapStyle?: string;\n  radius?: number;\n  upperPercentile?: number;\n  coverage?: number;\n}) {\n  // ...\n\n  const layers = [\n    new HexagonLayer&lt;DataPoint&gt;({\n      id: 'heatmap',\n      gpuAggregation: true,\n      colorRange,\n      coverage: sliderCoverage / 100,\n      data,\n      elevationRange: [0, 80],\n      elevationScale: data && data.length ? 50 : 0,\n      extruded: true,\n      getPosition: d =&gt; d,\n      pickable: true,\n      radius: sliderRadius,\n      upperPercentile: sliderUPercentile,\n      material: {\n        ambient: 0.64,\n        diffuse: 0.6,\n        shininess: 32,\n        specularColor: [51, 51, 51]\n      },\n\n      transitions: {\n        elevationScale: 3000\n      }\n    })\n  ];\n\n  // ...\n}\nThe most important properties in the above constructor are\n\ndata: an array of points\ngetPosition: function that gets the coordinates in the form of [&lt;longitude&gt;, &lt;latitude&gt;] from a point\npickable: allows the elements on the layer to become interactive\nradius: specifies the radius in metres convered by a single hexagonal bar\n\nFor more information about the different properties that can used, see HexagonLayer.\nFinally, we can again use the App component to render the layers on the root element.\nasync function renderToDOM(container: HTMLDivElement) {\n    // ...\n    const points = // get the points from the dataset\n    root.render(&lt;App data={points} /&gt;);\n}\nHere is the output the example above (the sliders have been added and are not provided by deck.gl)"
  },
  {
    "objectID": "exposition.html#screenshots",
    "href": "exposition.html#screenshots",
    "title": "deck.gl: A High Performance GPU-Powered Visualization Framework",
    "section": "Screenshots",
    "text": "Screenshots\nHere are some screenshots of visualizations created using deck.gl:\n\n\n\n\n\n\n\n\n\nGeoJSONLayer (Paths): Renders GeoJSON formatted data as polygons, lines and points\n\n\n\n\n\n\n\nLineLayer: Renders straight lines joining pairs of source and target coordinates\n\n\n\n\n\n\n\n\n\nGoogle 3D Tiles: A CompositeLayer that renders geometries based on the tile type\n\n\n\n\n\n\n\nTextLayer: Renders text labels at given coordinates\n\n\n\n\n\n\n\n\n\nMinimap: A regular layered view with a minimap in the corner\n\n\n\n\n\n\n\nGlobeView: projects the Earth into a 3D globe"
  },
  {
    "objectID": "exposition.html#use-cases",
    "href": "exposition.html#use-cases",
    "title": "deck.gl: A High Performance GPU-Powered Visualization Framework",
    "section": "Use Cases",
    "text": "Use Cases\n\n1. Climate Science:\nVisualizing weather patterns, temperature variations and environmental changes using animated layers and heatmaps\n\n\n2. Geospatial Analytics:\nAnalyzing tree coverage across a city, regions prone to flooding, land-use planning.\n\n\n3. Urban Planning:\nAnalyzing city traffic, infrastructure and property values in different areas.\n\n\n4. Transportation:\nTracking fleet movements, analyzing air traffic and optimizing routes.\n\n\n5. Financial and Retail Analysis:\nTracking sales performance, customer distribution and market trends."
  },
  {
    "objectID": "exposition.html#conclusion",
    "href": "exposition.html#conclusion",
    "title": "deck.gl: A High Performance GPU-Powered Visualization Framework",
    "section": "Conclusion",
    "text": "Conclusion\ndeck.gl is a robust and flexible tool for producing beautiful visualizations of big data. It is very effective in rendering sophisticated visuals by leveraging the GPU. It supports many mapping libraries and accepts many data formats. It is an excellent tool for visualizing geospatial data and can be applied in a wide range of applications such as climate science, urban planning and transportation."
  },
  {
    "objectID": "exposition.html#references-and-further-reading",
    "href": "exposition.html#references-and-further-reading",
    "title": "deck.gl: A High Performance GPU-Powered Visualization Framework",
    "section": "References and Further Reading",
    "text": "References and Further Reading\n\ndeck.gl Documentation\ndeck.gl GitHub Repository\nDeckGL component\nMap component\nloaders.gl Documentation\nReact Documentation\nTypescript Documentation\nMapbox"
  }
]